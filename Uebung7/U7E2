import numpy as np
import scipy.stats as sts

# Implement the one-shot algo

N = 1000
a = np.array([1,3,10])
sigma = np.array([[4,-1],[-1,4]])
alpha = 0.05

# generate N samples of multivariate normal samples
X = np.random.multivariate_normal([0,0],sigma,size=N)

def Y_def(X,a):
    if(X[0]+X[1]>= 2*a):
        return 1
    else:
        return 0
    
def psi(X,a):
    if (X[0]>= a and X[1]>= a):
        return 1
    else:
        return 0
    
def erwartungswert(a):
    return 1-sts.norm.cdf(2*a/np.sqrt(6))
    
# generate N samples of Y
Y = []

# generate N samples of Z
Z = []
for i in range(N):
    Z.append(psi(X[i,:],a[0]))   
    


for i in range(N):
    Y.append(Y_def(X[i,:],a[0]))
    
# Compute mean Z
mean_Z = 1/N*np.sum(Z) 

# Compute variance 
sigma_zy = 1/(N-1)*np.sum((Z-mean_Z)*(Y-erwartungswert(a[0])))
sigma_y = 1/(N-1)*np.sum(Y-erwartungswert(a[0]))

# compute alpha_star
alpha_star = - sigma_zy/sigma_y

# estimator

mean_cv = 1/N*np.sum(Z+alpha_star*(Y-erwartungswert(a[0])))

print(mean_cv)

# construct confidence intervall
intervall = [[0],[0]]
intervall[0] = 1

